import os
from PIL import Image
from io import BytesIO
from logging import getLogger
from typing import Any

import numpy as np
import requests
import onnxruntime

logger = getLogger(__name__)
PUBLIC_KEY = os.environ.get("DISCORD_PUBLIC_KEY")
APP_ID = os.environ.get("DISCORD_APP_ID")
BOT_TOKEN = os.environ.get("DISCORD_BOT_TOKEN")


coefs = {'coef_denoise_mu_1': [1.0000050067901611, 1.000105381011963, 1.0002057552337646, 1.0003063678741455, 1.0004067420959473, 1.0005072355270386, 1.0006078481674194, 1.0007083415985107, 1.0008090734481812, 1.000909686088562, 1.0010102987289429, 1.0011110305786133, 1.0012117624282837, 1.001312494277954, 1.001413345336914, 1.0015140771865845, 1.001615047454834, 1.001715898513794, 1.0018168687820435, 1.0019177198410034, 1.002018690109253, 1.002119779586792, 1.0022207498550415, 1.0023218393325806, 1.0024229288101196, 1.0025240182876587, 1.0026252269744873, 1.002726435661316, 1.0028276443481445, 1.0029289722442627, 1.0030301809310913, 1.0031315088272095, 1.0032328367233276, 1.0033341646194458, 1.0034356117248535, 1.0035370588302612, 1.003638505935669, 1.0037399530410767, 1.003841519355774, 1.0039430856704712, 1.0040446519851685, 1.0041462182998657, 1.0042479038238525, 1.0043495893478394, 1.0044512748718262, 1.0045530796051025, 1.0046547651290894, 1.0047565698623657, 1.0048584938049316, 1.0049604177474976, 1.0050623416900635, 1.0051641464233398, 1.0052661895751953, 1.0053681135177612, 1.0054701566696167, 1.0055721998214722, 1.0056743621826172, 1.0057764053344727, 1.0058785676956177, 1.0059807300567627, 1.0060830116271973, 1.0061851739883423, 1.0062874555587769, 1.0063897371292114, 1.0064921379089355, 1.0065944194793701, 1.0066968202590942, 1.006799340248108, 1.006901741027832, 1.0070042610168457, 1.0071067810058594, 1.007209300994873, 1.0073118209838867, 1.00741446018219, 1.0075170993804932, 1.007619857788086, 1.0077224969863892, 1.007825255393982, 1.0079280138015747, 1.0080307722091675, 1.0081336498260498, 1.0082365274429321, 1.0083394050598145, 1.0084424018859863, 1.0085453987121582, 1.00864839553833, 1.008751392364502, 1.0088543891906738, 1.0089575052261353, 1.0090606212615967, 1.009163737297058, 1.009266972541809, 1.00937020778656, 1.009473443031311, 1.009576678276062, 1.0096800327301025, 1.0097832679748535, 1.0098867416381836, 1.0099900960922241, 1.0100935697555542, 1.0101970434188843, 1.0103005170822144, 1.0104039907455444, 1.0105077028274536, 1.0106111764907837, 1.0107148885726929, 1.0108184814453125, 1.0109221935272217, 1.0110259056091309, 1.0111297369003296, 1.0112334489822388, 1.0113372802734375, 1.0114411115646362, 1.011544942855835, 1.0116488933563232, 1.0117528438568115, 1.0118567943572998, 1.0119608640670776, 1.0120649337768555, 1.0121690034866333, 1.0122730731964111, 1.012377142906189, 1.0124813318252563, 1.0125855207443237, 1.0126898288726807, 1.0127941370010376, 1.0128984451293945, 1.0130027532577515, 1.0131070613861084, 1.0132114887237549, 1.0133159160614014, 1.0134204626083374, 1.0135248899459839, 1.01362943649292, 1.013733983039856, 1.013838529586792, 1.0139431953430176, 1.0140478610992432, 1.0141525268554688, 1.0142571926116943, 1.014362096786499, 1.0144667625427246, 1.0145716667175293, 1.0146764516830444, 1.0147812366485596, 1.0148861408233643, 1.0149911642074585, 1.0150961875915527, 1.015201210975647, 1.0153062343597412, 1.0154112577438354, 1.0155164003372192, 1.015621542930603, 1.0157266855239868, 1.0158319473266602, 1.0159372091293335, 1.0160424709320068, 1.0161477327346802, 1.016253113746643, 1.016358494758606, 1.0164638757705688, 1.0165692567825317, 1.0166747570037842, 1.0167803764343262, 1.016885757446289, 1.016991376876831, 1.017096996307373, 1.017202615737915, 1.017308235168457, 1.0174139738082886, 1.0175197124481201, 1.0176255702972412, 1.0177313089370728, 1.0178371667861938, 1.017943024635315, 1.018048882484436, 1.0181548595428467, 1.0182608366012573, 1.018366813659668, 1.0184729099273682, 1.0185788869857788, 1.018684983253479, 1.0187910795211792, 1.018897294998169, 1.0190035104751587, 1.0191097259521484, 1.0192159414291382, 1.0193222761154175, 1.0194286108016968, 1.019534945487976, 1.019641399383545, 1.0197478532791138, 1.0198543071746826, 1.0199607610702515, 1.0200672149658203, 1.0201737880706787, 1.0202804803848267, 1.020387053489685, 1.020493745803833, 1.020600438117981, 1.020707130432129, 1.0208139419555664, 1.020920753479004, 1.0210275650024414, 1.0211344957351685, 1.021241307258606, 1.021348237991333, 1.02145516872406, 1.0215622186660767, 1.0216692686080933, 1.0217763185501099, 1.021883487701416, 1.0219905376434326, 1.0220977067947388, 1.022204875946045, 1.0223121643066406, 1.0224194526672363, 1.022526741027832, 1.0226340293884277, 1.022741436958313, 1.0228488445281982, 1.0229562520980835, 1.0230637788772583, 1.0231711864471436, 1.023278832435608, 1.0233863592147827, 1.023494005203247, 1.0236016511917114, 1.0237092971801758, 1.0238170623779297, 1.023924708366394, 1.024032473564148, 1.0241403579711914, 1.0242481231689453, 1.0243560075759888, 1.0244640111923218, 1.0245718955993652, 1.0246798992156982, 1.0247880220413208, 1.0248959064483643, 1.0250040292739868, 1.0251121520996094, 1.025220274925232, 1.0253283977508545, 1.0254367589950562, 1.0255450010299683, 1.0256532430648804, 1.025761604309082, 1.0258699655532837, 1.0259783267974854], 'coef_denoise_mu_2': [0.003160148160532117, 0.014186155050992966, 0.01637083664536476, 0.017364293336868286, 0.01793759874999523, 0.01831292361021042, 0.018579434603452682, 0.0187796950340271, 0.018936922773718834, 0.01906481198966503, 0.019171759486198425, 0.019263410940766335, 0.01934356428682804, 0.019415011629462242, 0.01947973109781742, 0.01953919231891632, 0.019594505429267883, 0.019646551460027695, 0.019696030765771866, 0.01974346488714218, 0.01978931948542595, 0.019833963364362717, 0.01987767033278942, 0.019920695573091507, 0.019963255152106285, 0.020005516707897186, 0.020047642290592194, 0.020089752972126007, 0.020131949335336685, 0.020174354314804077, 0.02021702378988266, 0.020260049030184746, 0.02030349150300026, 0.02034740336239338, 0.02039184235036373, 0.020436853170394897, 0.020482467487454414, 0.02052873559296131, 0.020575687289237976, 0.020623348653316498, 0.020671747624874115, 0.020720910280942917, 0.020770855247974396, 0.02082161419093609, 0.02087319642305374, 0.020925626158714294, 0.020978916436433792, 0.021033084020018578, 0.021088141947984695, 0.02114410512149334, 0.021200982853770256, 0.02125878632068634, 0.021317534148693085, 0.02137722820043564, 0.021437877789139748, 0.021499499678611755, 0.02156209945678711, 0.021625680848956108, 0.021690255030989647, 0.021755831316113472, 0.02182241715490818, 0.021890010684728622, 0.021958624944090843, 0.02202826552093029, 0.02209894359111786, 0.022170649841427803, 0.022243401035666466, 0.022317206487059593, 0.02239205874502659, 0.022467970848083496, 0.022544940933585167, 0.022622980177402496, 0.022702086716890335, 0.02278226800262928, 0.02286352775990963, 0.022945869714021683, 0.02302929386496544, 0.023113805800676346, 0.023199407383799553, 0.023286104202270508, 0.02337389998137951, 0.023462794721126556, 0.02355278842151165, 0.023643888533115387, 0.023736098781228065, 0.02382940798997879, 0.023923834785819054, 0.02401936985552311, 0.024116020649671555, 0.02421378903090954, 0.024312667548656464, 0.024412667378783226, 0.024513790383934975, 0.024616029113531113, 0.02471938729286194, 0.02482387237250805, 0.02492947317659855, 0.025036200881004333, 0.025144048035144806, 0.025253020226955414, 0.025363117456436157, 0.02547433227300644, 0.025586670264601707, 0.02570013515651226, 0.025814712047576904, 0.025930417701601982, 0.0260472372174263, 0.026165174320340157, 0.02628422901034355, 0.026404403150081635, 0.02652568183839321, 0.026648078113794327, 0.026771582663059235, 0.026896195486187935, 0.02702191285789013, 0.027148736640810966, 0.027276653796434402, 0.027405675500631332, 0.02753578871488571, 0.02766699530184269, 0.02779928594827652, 0.02793266251683235, 0.028067121282219887, 0.028202654793858528, 0.028339264914393425, 0.02847694419324398, 0.028615690767765045, 0.028755493462085724, 0.028896348550915718, 0.029038257896900177, 0.029181214049458504, 0.0293252132833004, 0.02947024069726467, 0.029616301879286766, 0.02976338565349579, 0.02991149201989174, 0.030060606077313423, 0.03021072968840599, 0.030361849814653397, 0.030513964593410492, 0.030667072162032127, 0.030821150168776512, 0.030976207926869392, 0.031132226809859276, 0.03128920495510101, 0.031447138637304306, 0.03160601854324341, 0.031765829771757126, 0.03192656859755516, 0.032088227570056915, 0.03225079923868179, 0.032414283603429794, 0.03257865831255913, 0.0327439159154892, 0.0329100638628006, 0.03307707607746124, 0.03324494883418083, 0.03341367468237877, 0.033583249896764755, 0.0337536558508873, 0.0339248888194561, 0.034096937626600266, 0.0342697948217392, 0.0344434529542923, 0.034617893397808075, 0.03479311987757683, 0.034969110041856766, 0.03514586761593819, 0.035323366522789, 0.03550161421298981, 0.03568059206008911, 0.03586029261350632, 0.03604070097208023, 0.03622180595993996, 0.036403607577085495, 0.03658609092235565, 0.03676924481987953, 0.03695305809378624, 0.03713752701878548, 0.03732263669371605, 0.03750837966799736, 0.037694741040468216, 0.03788171336054802, 0.03806929662823677, 0.03825746476650238, 0.03844621777534485, 0.03863554075360298, 0.03882542997598648, 0.03901587054133415, 0.0392068512737751, 0.03939836844801903, 0.03959040716290474, 0.039782967418432236, 0.03997602313756943, 0.04016957804560661, 0.0403636209666729, 0.04055814817547798, 0.04075312986969948, 0.040948573499917984, 0.0411444716155529, 0.04134080559015274, 0.0415375791490078, 0.041734762489795685, 0.0419323705136776, 0.04213038459420204, 0.042328789830207825, 0.042527586221694946, 0.04272676259279251, 0.04292631521821022, 0.04312622919678688, 0.04332650080323219, 0.04352712258696556, 0.04372807964682579, 0.04392937198281288, 0.04413099214434624, 0.044332925230264664, 0.04453517496585846, 0.04473772644996643, 0.04494057223200798, 0.04514371603727341, 0.04534713551402092, 0.04555083066225052, 0.0457548052072525, 0.04595903307199478, 0.04616352915763855, 0.04636826366186142, 0.04657325521111488, 0.04677847772836685, 0.046983931213617325, 0.0471896193921566, 0.04739551991224289, 0.04760164022445679, 0.047807976603507996, 0.04801451414823532, 0.04822126030921936, 0.04842820391058922, 0.0486353300511837, 0.048842646181583405, 0.04905014857649803, 0.04925781488418579, 0.049465667456388474, 0.04967367649078369, 0.04988186061382294, 0.05009019747376442, 0.05029870197176933, 0.05050734803080559, 0.05071614682674408, 0.05092509463429451, 0.05113418027758598, 0.0513434074819088], 'coef_denoise_sigma': [0.0, 0.0030918356496840715, 0.01198832131922245, 0.017638500779867172, 0.022179972380399704, 0.026066865772008896, 0.02951054461300373, 0.032629262655973434, 0.035497985780239105, 0.03816693276166916, 0.04067131504416466, 0.0430377833545208, 0.045286234468221664, 0.047432657331228256, 0.049489423632621765, 0.05146675556898117, 0.05337303876876831, 0.05521541088819504, 0.056999851018190384, 0.05873136967420578, 0.060414496809244156, 0.06205301731824875, 0.0636502131819725, 0.06520911306142807, 0.06673236191272736, 0.06822222471237183, 0.06968090683221817, 0.07111018896102905, 0.07251178473234177, 0.07388734072446823, 0.07523815333843231, 0.07656557112932205, 0.07787076383829117, 0.07915481179952621, 0.08041869848966599, 0.08166338503360748, 0.08288967609405518, 0.0840984359383583, 0.0852903351187706, 0.08646608889102936, 0.08762633800506592, 0.08877168595790863, 0.08990267664194107, 0.0910198986530304, 0.09212377667427063, 0.09321480989456177, 0.09429345279932022, 0.09536010771989822, 0.09641513973474503, 0.09745897352695465, 0.09849193692207336, 0.09951435029506683, 0.10052656382322311, 0.10152885317802429, 0.10252151638269424, 0.10350482910871506, 0.10447905957698822, 0.10544442385435104, 0.10640119016170502, 0.10734957456588745, 0.10828980803489685, 0.10922207683324814, 0.11014658212661743, 0.11106353253126144, 0.1119731143116951, 0.11287546157836914, 0.11377078294754028, 0.11465924978256226, 0.11554097384214401, 0.11641613394021988, 0.11728485673666, 0.11814732104539871, 0.11900361627340317, 0.11985389143228531, 0.12069828063249588, 0.12153686583042145, 0.12236981093883514, 0.12319718301296234, 0.12401913851499557, 0.12483575940132141, 0.12564712762832642, 0.12645338475704193, 0.12725457549095154, 0.1280508190393448, 0.12884221971035004, 0.12962880730628967, 0.13041076064109802, 0.13118807971477509, 0.13196086883544922, 0.1327292025089264, 0.13349317014217377, 0.13425280153751373, 0.13500823080539703, 0.13575947284698486, 0.13650663197040558, 0.13724975287914276, 0.1379888653755188, 0.13872408866882324, 0.13945546746253967, 0.14018303155899048, 0.14090687036514282, 0.14162702858448029, 0.14234355092048645, 0.1430564820766449, 0.1437658965587616, 0.14447182416915894, 0.14517433941364288, 0.14587345719337463, 0.14656925201416016, 0.14726173877716064, 0.14795097708702087, 0.14863702654838562, 0.14931991696357727, 0.1499996781349182, 0.15067633986473083, 0.1513499915599823, 0.15202060341835022, 0.15268827974796295, 0.1533530056476593, 0.15401485562324524, 0.15467384457588196, 0.15533000230789185, 0.15598337352275848, 0.15663397312164307, 0.15728186070919037, 0.15792706608772278, 0.1585695892572403, 0.1592094898223877, 0.15984678268432617, 0.1604815125465393, 0.1611136794090271, 0.16174334287643433, 0.16237051784992218, 0.16299523413181305, 0.16361750662326813, 0.1642373949289322, 0.16485485434532166, 0.16547000408172607, 0.16608278453350067, 0.1666932851076126, 0.1673014760017395, 0.16790743172168732, 0.16851112246513367, 0.16911260783672333, 0.1697119027376175, 0.17030903697013855, 0.1709040105342865, 0.17149685323238373, 0.17208759486675262, 0.17267625033855438, 0.1732628345489502, 0.17384739220142365, 0.17442990839481354, 0.17501041293144226, 0.1755889505147934, 0.17616549134254456, 0.17674009501934052, 0.17731277644634247, 0.17788353562355042, 0.17845238745212555, 0.17901937663555145, 0.17958450317382812, 0.18014779686927795, 0.18070924282073975, 0.1812688708305359, 0.18182674050331116, 0.18238279223442078, 0.1829371154308319, 0.18348968029022217, 0.18404051661491394, 0.18458960950374603, 0.1851370632648468, 0.1856827735900879, 0.18622684478759766, 0.1867692619562149, 0.18731003999710083, 0.18784917891025543, 0.1883866786956787, 0.18892262876033783, 0.189456969499588, 0.18998976051807404, 0.19052095711231232, 0.19105063378810883, 0.19157879054546356, 0.19210539758205414, 0.19263051450252533, 0.19315414130687714, 0.19367629289627075, 0.19419696927070618, 0.1947162002325058, 0.19523395597934723, 0.19575031101703644, 0.19626523554325104, 0.19677875936031342, 0.19729086756706238, 0.1978016197681427, 0.1983109712600708, 0.19881898164749146, 0.19932562112808228, 0.19983093440532684, 0.20033492147922516, 0.20083758234977722, 0.20133891701698303, 0.20183898508548737, 0.20233774185180664, 0.20283523201942444, 0.20333145558834076, 0.2038264274597168, 0.20432013273239136, 0.20481263101100922, 0.2053038775920868, 0.20579390227794647, 0.20628271996974945, 0.20677036046981812, 0.20725679397583008, 0.20774203538894653, 0.20822611451148987, 0.20870903134346008, 0.20919080078601837, 0.20967142283916473, 0.21015091240406036, 0.21062925457954407, 0.21110647916793823, 0.21158260107040405, 0.21205762028694153, 0.21253153681755066, 0.21300438046455383, 0.21347612142562866, 0.21394680440425873, 0.21441641449928284, 0.21488498151302338, 0.21535249054431915, 0.21581895649433136, 0.21628440916538239, 0.21674883365631104, 0.21721221506595612, 0.2176745980978012, 0.21813596785068512, 0.21859636902809143, 0.21905574202537537, 0.2195141613483429, 0.21997156739234924, 0.22042803466320038, 0.22088351845741272, 0.22133804857730865, 0.22179163992404938, 0.2222442775964737, 0.222695991396904, 0.2231467366218567, 0.22359658777713776]}

def remove_noise_from_batch(
    x_t: np.ndarray, epsilon_pred: np.ndarray, t: int
) -> np.ndarray:
    """
    sampling x_{t-1} ~ N(mu, sigma^2) with reparameterization trick

    mu (Eq. 125): (1 / \sqrt{a_t}) * x_t - [(1 - a_t) / \sqrt{a_t} / \sqrt{1 - \bar{a}_t}] * \epsilon

    sigma^2 (Eq. 85): (1 - a_t) * (1 - \bar{a}_{t - 1}) / (1 - \bar{a}_t)
    """
    mu_x_t = (
        coefs['coef_denoise_mu_1'][t] * x_t - coefs['coef_denoise_mu_2'][t] * epsilon_pred
    )
    sigma_t = coefs['coef_denoise_sigma'][t]
    z = np.random.randn(*epsilon_pred.shape)
    return mu_x_t + sigma_t * z


def lambda_handler(event, context) -> dict[str, Any]:
    logger.warning(event)
    logger.warning(context)
    
    interaction_token = event['interaction_token']

    patch_url = f"https://discord.com/api/v10/webhooks/{APP_ID}/{interaction_token}/messages/@original"

    json_payload = {
        "type":7,
        "content": "EDITED",
        "embeds": [
            {
                "title": "Test Embed",
                "description": "Describe Embed",
                "thumbnail": {
                    "url": "attachment://filename.jpg"
                },
                "image": {
                    "url": "attachment://filename.jpg"
                },
            }
        ],
        "attachments": [
            {
                "id": 0,
                "description": "test image",
                "filename": "filename.jpg"
            }
        ]
    }
    headers = {
        "Authorization": f"Bot {BOT_TOKEN}"
    }
    # img_data = np.random.randint(0, 255, (100, 100, 3), np.uint8)
    # img = Image.fromarray(img_data)

    ort_session = onnxruntime.InferenceSession("model2.onnx", None)
    x_t = np.random.randn(1, 28*28).astype(np.float32)
    logger.warning(x_t)

    def onnx_model(x_t, t):
        ort_inputs = {
            ort_session.get_inputs()[0].name: x_t,
        }

        ort_outs = ort_session.run([], ort_inputs)
        return ort_outs[0]


    def write_out(img_np):

        img_file = BytesIO()
        img = Image.fromarray((((img_np - np.min(img_np)) / (np.max(img_np) - np.min(img_np)) *254)).astype(np.uint8).reshape((28, 28)))
        if img.mode != 'RGB':
            img = img.convert('RGB')
        img.save(img_file, format="jpeg")
        img_file.seek(0)
        files = {'files[0]': ("filename.jpg", img_file, "image/jpg")}


        try:
            r = requests.patch(patch_url, headers=headers, json=json_payload, files=files)
            return True, None
        except Exception as e:
            return False, e

    for ts in range(249, -1, -1):
        p = onnx_model(x_t.astype(np.float32), ts)
        x_t = remove_noise_from_batch(
            x_t, p, ts,
        )
        if ts % 10 == 0:
            logger.warning(ts)
        if ts % 20 == 0:
            write_out(x_t)


    s, e = write_out(x_t)

    if not s:
        return {
            'statusCode': 501,
            'body': {
                'exception': str(e) 
            }
        }

    return {
        'statusCode': 200,
        'body': {'data': 'Success!'}
    }

    



     
    
